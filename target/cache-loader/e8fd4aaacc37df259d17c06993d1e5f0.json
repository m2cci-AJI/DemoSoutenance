{"remainingRequest":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\tslint-loader\\index.js!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\src\\main\\webapp\\app\\entities\\vue-projects\\components\\timeline\\vis-timeline.service.ts","dependencies":[{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\src\\main\\webapp\\app\\entities\\vue-projects\\components\\timeline\\vis-timeline.service.ts","mtime":1566402769267},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar index_1 = require(\"./index\");\r\n/**\r\n * A service to create, manage and control VisTimeline instances.\r\n *\r\n * @export\r\n * @class VisTimelineService\r\n */\r\nvar VisTimelineService = /** @class */ (function () {\r\n    function VisTimelineService() {\r\n        /**\r\n         * Fired when the current time bar redraws.\r\n         * The rate depends on the zoom level.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.currentTimeTick = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when clicked inside the Timeline.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.click = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when right-clicked inside the Timeline.\r\n         * Note that in order to prevent the context menu from showing up,\r\n         * default behavior of the event must be stopped.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.contextmenu = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when double clicked inside the Timeline.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.doubleClick = new core_1.EventEmitter();\r\n        /**\r\n         * \tFired after the dragging of a group is finished.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.groupDragged = new core_1.EventEmitter();\r\n        /**\r\n         * Fired once after each graph redraw.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.changed = new core_1.EventEmitter();\r\n        /**\r\n         * Fired repeatedly when the timeline window is being changed.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.rangechange = new core_1.EventEmitter();\r\n        /**\r\n         * Fired once after the timeline window has been changed.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.rangechanged = new core_1.EventEmitter();\r\n        /**\r\n         * Fired after the user selects or deselects items by tapping or holding them.\r\n         * When a use taps an already selected item, the select event is fired again.\r\n         * Not fired when the method setSelectionis executed.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.select = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the user moves the mouse over an item.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.itemover = new core_1.EventEmitter();\r\n        /**\r\n         * Fired when the user moves the mouse out of an item.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.itemout = new core_1.EventEmitter();\r\n        /**\r\n         * Fired repeatedly when the user is dragging the custom time bar.\r\n         * Only available when the custom time bar is enabled.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.timechange = new core_1.EventEmitter();\r\n        /**\r\n         * Fired once after the user has dragged the custom time bar.\r\n         * Only available when the custom time bar is enabled.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineService\r\n         */\r\n        this.timechanged = new core_1.EventEmitter();\r\n        this.timelines = {};\r\n    }\r\n    /**\r\n     * Creates a new timeline instance.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {HTMLElement} container The HTML element that contains the timeline view.\r\n     * @param {VisTimelineItems} items The initial timeline items.\r\n     * @param {VisTimelineOptions} [options] The timeline options.\r\n     *\r\n     * @throws {Error} Thrown when timeline already exists.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.createWithItems = function (visTimeline, container, items, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            throw new Error(this.alreadyExistsError(visTimeline));\r\n        }\r\n        this.timelines[visTimeline] = new index_1.VisTimeline(container, items, options);\r\n    };\r\n    /**\r\n     * Creates a new timeline instance.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {HTMLElement} container The HTML element that contains the timeline view.\r\n     * @param {VisTimelineItems} items The initial timeline items.\r\n     * @param {VisTimelineGroups} groups The initial timeline groups.\r\n     * @param {VisTimelineOptions} [options] The timeline options.\r\n     *\r\n     * @throws {Error} Thrown when timeline already exists.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.createWithItemsAndGroups = function (visTimeline, container, items, groups, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            throw new Error(this.alreadyExistsError(visTimeline));\r\n        }\r\n        this.timelines[visTimeline] = new index_1.VisTimeline(container, items, groups, options);\r\n    };\r\n    /**\r\n     * Add new vertical bar representing a custom time that can be dragged by the user.\r\n     * The id is added as CSS class name of the custom time bar,\r\n     * allowing to style multiple time bars differently.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time Parameter time can be a Date, Number, or String, and is new Date() by default.\r\n     * @param {VisId} [id] Parameter id can be Number or String and is undefined by default.\r\n     * @returns {VisId} The method returns id of the created bar.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.addCustomTime = function (visTimeline, time, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].addCustomTime(time, id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Adjust the visible window such that it fits all items.\r\n     * See also function focus(id).\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.fit = function (visTimeline, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].fit(options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Adjust the visible window such that the selected item is centered on screen.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} id The id of the item.\r\n     * @param {VisTimelineFitOptions} [options] Options options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.focusOnId = function (visTimeline, id, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].focus(id, options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Adjust the visible window such that the selected items are centered on screen.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId[]} ids The item ids.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.focusOnIds = function (visTimeline, ids, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].focus(ids, options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Get the current time.\r\n     * Only applicable when option showCurrentTime is true.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {Date} The current time.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getCurrentTime = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getCurrentTime();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Retrieve the custom time from the custom time bar with given id.\r\n     * Id is undefined by default.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} [id] The time bar id.\r\n     * @returns {Date} The custom time.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getCustomTime = function (visTimeline, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getCustomTime(id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Returns an Object with relevant properties from an event.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {Event} event The event.\r\n     * @returns {VisTimelineEventPropertiesResult} Properties of an event\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getEventProperties = function (visTimeline, event) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getEventProperties(event);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Get the range of all the items as an object containing min: Date and max: Date.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {{ min: Date, max: Date }} The min and max dates.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getItemRange = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getItemRange();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Get an array with the ids of the currently selected items.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {VisId[]} The currently selected items.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getSelection = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getSelection();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Get an array with the ids of the currently visible items.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {VisId[]} The currently visible items.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getVisibleItems = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getVisibleItems();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Get the current visible window.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {{ start: Date, end: Date }} Returns an object with properties start: Date and end: Date.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.getWindow = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getWindow();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * \tMove the window such that given time is centered on screen.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time Parameter time can be a Date, Number, or String.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.moveTo = function (visTimeline, time, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].moveTo(time, options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Force a redraw of the Timeline.\r\n     * The size of all items will be recalculated.\r\n     * Can be useful to manually redraw when option autoResize=false and the window has been resized,\r\n     * or when the items CSS has been changed.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.redraw = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].redraw();\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Remove vertical bars previously added to the timeline via addCustomTime method.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} id Parameter id is the ID of the custom vertical bar returned by addCustomTime method.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.removeCustomTime = function (visTimeline, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].removeCustomTime(id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Set a current time.\r\n     * This can be used for example to ensure that a client's time is synchronized\r\n     * with a shared server time.\r\n     * Only applicable when option showCurrentTime is true.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time time can be a Date object, numeric timestamp, or ISO date string.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setCurrentTime = function (visTimeline, time) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setCurrentTime(time);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * \tAdjust the time of a custom time bar.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time Parameter time can be a Date object, numeric timestamp, or ISO date string.\r\n     * @param {VisId} [id] Parameter id is the id of the custom time bar, and is undefined by default.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setCustomTime = function (visTimeline, time, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setCustomTime(time, id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Adjust the title attribute of a custom time bar.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {string} title Parameter title is the string to be set as title.\r\n     *                       Use empty string to hide the title completely.\r\n     * @param {VisId} [id] Parameter id is the id of the custom time bar, and is undefined by default.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setCustomTimeTitle = function (visTimeline, title, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setCustomTimeTitle(title, id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Set both groups and items at once.\r\n     * Both properties are optional.\r\n     * This is a convenience method for individually calling both setItems(items) and setGroups(groups).\r\n     * Both items and groups can be an Array with Objects, a DataSet (offering 2 way data binding),\r\n     * or a DataView (offering 1 way data binding).\r\n     * For each of the groups, the items of the timeline are filtered on the property group,\r\n     * which must correspond with the id of the group.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {{ groups?: VisTimelineGroups; items?: VisTimelineItems }} data The new timline data.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setData = function (visTimeline, data) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setData(data);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Set a data set with groups for the Timeline.\r\n     * For each of the groups, the items of the timeline are filtered on the property group,\r\n     * which must correspond with the id of the group.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineGroups} groups a DataSet (offering 2 way data binding)\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setGroups = function (visTimeline, groups) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setGroups(groups);\r\n        } /*else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }*/\r\n    };\r\n    /**\r\n     * Set a data set with items for the Timeline.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineItems} items can be an Array with Objects, a DataSet (offering 2 way data binding)\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setItems = function (visTimeline, items) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setItems(items);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Set or update options.\r\n     * It is possible to change any option of the timeline at any time.\r\n     * You can for example switch orientation on the fly.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineOptions} options The new options of the timeline.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setOptions = function (visTimeline, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setOptions(options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Select one item by its id.#\r\n     * The currently selected items will be unselected.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} id The id of the item that should be selected.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setSelectionToId = function (visTimeline, id) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setSelection(id);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Select multiple items by their id.\r\n     * The currently selected items will be unselected.\r\n     * To unselect all selected items, call `setSelection([])`.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId[]} ids The ids of the irems that should be selected.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setSelectionToIds = function (visTimeline, ids) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setSelection(ids);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Set the current visible window.\r\n     *\r\n     * If the parameter value of start or end is null, the parameter will be left unchanged.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} start The parameters start can be a Date, Number, or String.\r\n     * @param {VisDate} end The parameters end can be a Date, Number, or String.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.setWindow = function (visTimeline, start, end, options) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setWindow(start, end, options);\r\n        }\r\n        else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    };\r\n    /**\r\n     * Destroy the Timeline.\r\n     * The timeline is removed from memory.\r\n     * All DOM elements and event listeners are cleaned up.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.destroy = function (visTimeline) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].destroy();\r\n            delete this.timelines[visTimeline];\r\n        }\r\n    };\r\n    /**\r\n     * Activates an event.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineEvents} eventName The event name.\r\n     * @param {boolean} preventDefault Stops the default behavior of the event.\r\n     * @returns {boolean} Returns true when the event was activated.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.on = function (visTimeline, eventName, preventDefault) {\r\n        if (this.timelines[visTimeline]) {\r\n            var that_1 = this;\r\n            this.timelines[visTimeline].on(eventName, function (params) {\r\n                var emitter = that_1[eventName];\r\n                if (emitter) {\r\n                    emitter.emit(params ? [visTimeline].concat(params) : visTimeline);\r\n                }\r\n                if (preventDefault && params.event) {\r\n                    params.event.preventDefault();\r\n                }\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Deactivates an event.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineEvents} eventName The event name.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    VisTimelineService.prototype.off = function (visTimeline, eventName) {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].off(eventName, undefined);\r\n        }\r\n    };\r\n    VisTimelineService.prototype.doesNotExistError = function (visTimeline) {\r\n        return \"Timeline with id \" + visTimeline + \" does not exist.\";\r\n    };\r\n    VisTimelineService.prototype.alreadyExistsError = function (visTimeline) {\r\n        return \"Timeline with id \" + visTimeline + \" already exists.\";\r\n    };\r\n    VisTimelineService = tslib_1.__decorate([\r\n        core_1.Injectable()\r\n    ], VisTimelineService);\r\n    return VisTimelineService;\r\n}());\r\nexports.VisTimelineService = VisTimelineService;\r\n",{"version":3,"file":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\src\\main\\webapp\\app\\entities\\vue-projects\\components\\timeline\\vis-timeline.service.ts","sourceRoot":"","sources":["C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\tslint-loader\\index.js!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\src\\main\\webapp\\app\\entities\\vue-projects\\components\\timeline\\vis-timeline.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport {\r\n    VisDate,\r\n    VisId,\r\n    VisTimeline,\r\n    VisTimelineEventPropertiesResult,\r\n    VisTimelineEvents,\r\n    VisTimelineFitOptions,\r\n    VisTimelineGroups,\r\n    VisTimelineItems,\r\n    VisTimelineOptions\r\n} from './index';\r\n\r\n/**\r\n * A service to create, manage and control VisTimeline instances.\r\n *\r\n * @export\r\n * @class VisTimelineService\r\n */\r\n@Injectable()\r\nexport class VisTimelineService {\r\n    /**\r\n     * Fired when the current time bar redraws.\r\n     * The rate depends on the zoom level.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public currentTimeTick: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Fired when clicked inside the Timeline.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public click: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Fired when right-clicked inside the Timeline.\r\n     * Note that in order to prevent the context menu from showing up,\r\n     * default behavior of the event must be stopped.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public contextmenu: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Fired when double clicked inside the Timeline.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public doubleClick: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * \tFired after the dragging of a group is finished.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public groupDragged: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Fired once after each graph redraw.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public changed: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Fired repeatedly when the timeline window is being changed.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public rangechange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Fired once after the timeline window has been changed.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public rangechanged: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Fired after the user selects or deselects items by tapping or holding them.\r\n     * When a use taps an already selected item, the select event is fired again.\r\n     * Not fired when the method setSelectionis executed.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public select: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Fired when the user moves the mouse over an item.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public itemover: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Fired when the user moves the mouse out of an item.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public itemout: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Fired repeatedly when the user is dragging the custom time bar.\r\n     * Only available when the custom time bar is enabled.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public timechange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Fired once after the user has dragged the custom time bar.\r\n     * Only available when the custom time bar is enabled.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public timechanged: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    private timelines: { [id: string]: VisTimeline } = {};\r\n\r\n    /**\r\n     * Creates a new timeline instance.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {HTMLElement} container The HTML element that contains the timeline view.\r\n     * @param {VisTimelineItems} items The initial timeline items.\r\n     * @param {VisTimelineOptions} [options] The timeline options.\r\n     *\r\n     * @throws {Error} Thrown when timeline already exists.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public createWithItems(visTimeline: string, container: HTMLElement, items: VisTimelineItems, options?: VisTimelineOptions): void {\r\n        if (this.timelines[visTimeline]) {\r\n            throw new Error(this.alreadyExistsError(visTimeline));\r\n        }\r\n\r\n        this.timelines[visTimeline] = new VisTimeline(container, items, options);\r\n    }\r\n\r\n    /**\r\n     * Creates a new timeline instance.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {HTMLElement} container The HTML element that contains the timeline view.\r\n     * @param {VisTimelineItems} items The initial timeline items.\r\n     * @param {VisTimelineGroups} groups The initial timeline groups.\r\n     * @param {VisTimelineOptions} [options] The timeline options.\r\n     *\r\n     * @throws {Error} Thrown when timeline already exists.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public createWithItemsAndGroups(\r\n        visTimeline: string,\r\n        container: HTMLElement,\r\n        items: VisTimelineItems,\r\n        groups: VisTimelineGroups,\r\n        options?: VisTimelineOptions\r\n    ): void {\r\n        if (this.timelines[visTimeline]) {\r\n            throw new Error(this.alreadyExistsError(visTimeline));\r\n        }\r\n\r\n        this.timelines[visTimeline] = new VisTimeline(container, items, groups, options);\r\n    }\r\n\r\n    /**\r\n     * Add new vertical bar representing a custom time that can be dragged by the user.\r\n     * The id is added as CSS class name of the custom time bar,\r\n     * allowing to style multiple time bars differently.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time Parameter time can be a Date, Number, or String, and is new Date() by default.\r\n     * @param {VisId} [id] Parameter id can be Number or String and is undefined by default.\r\n     * @returns {VisId} The method returns id of the created bar.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public addCustomTime(visTimeline: string, time: VisDate, id?: VisId): VisId {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].addCustomTime(time, id);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adjust the visible window such that it fits all items.\r\n     * See also function focus(id).\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public fit(visTimeline: string, options?: VisTimelineFitOptions): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].fit(options);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adjust the visible window such that the selected item is centered on screen.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} id The id of the item.\r\n     * @param {VisTimelineFitOptions} [options] Options options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public focusOnId(visTimeline: string, id: VisId, options?: VisTimelineFitOptions): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].focus(id, options);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adjust the visible window such that the selected items are centered on screen.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId[]} ids The item ids.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public focusOnIds(visTimeline: string, ids: VisId[], options?: VisTimelineFitOptions): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].focus(ids, options);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current time.\r\n     * Only applicable when option showCurrentTime is true.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {Date} The current time.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public getCurrentTime(visTimeline: string): Date {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getCurrentTime();\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieve the custom time from the custom time bar with given id.\r\n     * Id is undefined by default.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} [id] The time bar id.\r\n     * @returns {Date} The custom time.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public getCustomTime(visTimeline: string, id?: VisId): Date {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getCustomTime(id);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an Object with relevant properties from an event.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {Event} event The event.\r\n     * @returns {VisTimelineEventPropertiesResult} Properties of an event\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public getEventProperties(visTimeline: string, event: Event): VisTimelineEventPropertiesResult {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getEventProperties(event);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the range of all the items as an object containing min: Date and max: Date.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {{ min: Date, max: Date }} The min and max dates.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public getItemRange(visTimeline: string): { min: Date; max: Date } {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getItemRange();\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get an array with the ids of the currently selected items.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {VisId[]} The currently selected items.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public getSelection(visTimeline: string): VisId[] {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getSelection();\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get an array with the ids of the currently visible items.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {VisId[]} The currently visible items.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public getVisibleItems(visTimeline: string): VisId[] {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getVisibleItems();\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current visible window.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @returns {{ start: Date, end: Date }} Returns an object with properties start: Date and end: Date.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public getWindow(visTimeline: string): { start: Date; end: Date } {\r\n        if (this.timelines[visTimeline]) {\r\n            return this.timelines[visTimeline].getWindow();\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \tMove the window such that given time is centered on screen.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time Parameter time can be a Date, Number, or String.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public moveTo(visTimeline: string, time: VisDate, options?: VisTimelineFitOptions): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].moveTo(time, options);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force a redraw of the Timeline.\r\n     * The size of all items will be recalculated.\r\n     * Can be useful to manually redraw when option autoResize=false and the window has been resized,\r\n     * or when the items CSS has been changed.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public redraw(visTimeline: string): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].redraw();\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove vertical bars previously added to the timeline via addCustomTime method.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} id Parameter id is the ID of the custom vertical bar returned by addCustomTime method.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public removeCustomTime(visTimeline: string, id: VisId): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].removeCustomTime(id);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a current time.\r\n     * This can be used for example to ensure that a client's time is synchronized\r\n     * with a shared server time.\r\n     * Only applicable when option showCurrentTime is true.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time time can be a Date object, numeric timestamp, or ISO date string.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public setCurrentTime(visTimeline: string, time: VisDate): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setCurrentTime(time);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \tAdjust the time of a custom time bar.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} time Parameter time can be a Date object, numeric timestamp, or ISO date string.\r\n     * @param {VisId} [id] Parameter id is the id of the custom time bar, and is undefined by default.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public setCustomTime(visTimeline: string, time: VisDate, id?: VisId): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setCustomTime(time, id);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adjust the title attribute of a custom time bar.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {string} title Parameter title is the string to be set as title.\r\n     *                       Use empty string to hide the title completely.\r\n     * @param {VisId} [id] Parameter id is the id of the custom time bar, and is undefined by default.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public setCustomTimeTitle(visTimeline: string, title: string, id?: VisId): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setCustomTimeTitle(title, id);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set both groups and items at once.\r\n     * Both properties are optional.\r\n     * This is a convenience method for individually calling both setItems(items) and setGroups(groups).\r\n     * Both items and groups can be an Array with Objects, a DataSet (offering 2 way data binding),\r\n     * or a DataView (offering 1 way data binding).\r\n     * For each of the groups, the items of the timeline are filtered on the property group,\r\n     * which must correspond with the id of the group.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {{ groups?: VisTimelineGroups; items?: VisTimelineItems }} data The new timline data.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public setData(visTimeline: string, data: { groups?: VisTimelineGroups; items?: VisTimelineItems }): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setData(data);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a data set with groups for the Timeline.\r\n     * For each of the groups, the items of the timeline are filtered on the property group,\r\n     * which must correspond with the id of the group.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineGroups} groups a DataSet (offering 2 way data binding)\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public setGroups(visTimeline: string, groups: VisTimelineGroups): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setGroups(groups);\r\n        } /*else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }*/\r\n    }\r\n\r\n    /**\r\n     * Set a data set with items for the Timeline.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineItems} items can be an Array with Objects, a DataSet (offering 2 way data binding)\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public setItems(visTimeline: string, items: VisTimelineItems): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setItems(items);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set or update options.\r\n     * It is possible to change any option of the timeline at any time.\r\n     * You can for example switch orientation on the fly.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineOptions} options The new options of the timeline.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public setOptions(visTimeline: string, options: VisTimelineOptions): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setOptions(options);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select one item by its id.#\r\n     * The currently selected items will be unselected.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId} id The id of the item that should be selected.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public setSelectionToId(visTimeline: string, id: VisId): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setSelection(id);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select multiple items by their id.\r\n     * The currently selected items will be unselected.\r\n     * To unselect all selected items, call `setSelection([])`.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisId[]} ids The ids of the irems that should be selected.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public setSelectionToIds(visTimeline: string, ids: VisId[]): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setSelection(ids);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the current visible window.\r\n     *\r\n     * If the parameter value of start or end is null, the parameter will be left unchanged.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisDate} start The parameters start can be a Date, Number, or String.\r\n     * @param {VisDate} end The parameters end can be a Date, Number, or String.\r\n     * @param {VisTimelineFitOptions} [options] Optional options.\r\n     *\r\n     * @throws {Error} Thrown when timeline does not exist.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public setWindow(visTimeline: string, start: VisDate, end: VisDate, options?: VisTimelineFitOptions): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].setWindow(start, end, options);\r\n        } else {\r\n            throw new Error(this.doesNotExistError(visTimeline));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy the Timeline.\r\n     * The timeline is removed from memory.\r\n     * All DOM elements and event listeners are cleaned up.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public destroy(visTimeline: string): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].destroy();\r\n            delete this.timelines[visTimeline];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Activates an event.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineEvents} eventName The event name.\r\n     * @param {boolean} preventDefault Stops the default behavior of the event.\r\n     * @returns {boolean} Returns true when the event was activated.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public on(visTimeline: string, eventName: VisTimelineEvents, preventDefault?: boolean): boolean {\r\n        if (this.timelines[visTimeline]) {\r\n            const that: { [index: string]: any } = this;\r\n            this.timelines[visTimeline].on(eventName, (params: any) => {\r\n                const emitter = that[eventName] as EventEmitter<any>;\r\n                if (emitter) {\r\n                    emitter.emit(params ? [visTimeline].concat(params) : visTimeline);\r\n                }\r\n                if (preventDefault && params.event) {\r\n                    params.event.preventDefault();\r\n                }\r\n            });\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Deactivates an event.\r\n     *\r\n     * @param {string} visTimeline The timeline name/identifier.\r\n     * @param {VisTimelineEvents} eventName The event name.\r\n     *\r\n     * @memberOf VisTimelineService\r\n     */\r\n    public off(visTimeline: string, eventName: VisTimelineEvents): void {\r\n        if (this.timelines[visTimeline]) {\r\n            this.timelines[visTimeline].off(eventName, undefined);\r\n        }\r\n    }\r\n\r\n    private doesNotExistError(visTimeline: string): string {\r\n        return `Timeline with id ${visTimeline} does not exist.`;\r\n    }\r\n\r\n    private alreadyExistsError(visTimeline: string): string {\r\n        return `Timeline with id ${visTimeline} already exists.`;\r\n    }\r\n}\r\n"]}]}