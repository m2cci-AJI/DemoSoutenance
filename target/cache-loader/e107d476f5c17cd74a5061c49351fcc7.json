{"remainingRequest":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\tslint-loader\\index.js!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\src\\main\\webapp\\app\\entities\\vue-collaborators\\components\\timeline\\vis-timeline.directive.ts","dependencies":[{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\src\\main\\webapp\\app\\entities\\vue-collaborators\\components\\timeline\\vis-timeline.directive.ts","mtime":1566402769250},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar vis_timeline_service_1 = require(\"./vis-timeline.service\");\r\nvar index_1 = require(\"./index\");\r\n/**\r\n * Use this directive with a div container to show timeline data.\r\n *\r\n * @export\r\n * @class VisTimelineDirective\r\n * @implements {OnInit}\r\n * @implements {OnDestroy}\r\n * @implements {OnChanges}\r\n */\r\nvar VisTimelineDirective = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of VisTimelineDirective.\r\n     *\r\n     * @param {ElementRef} elementRef The HTML element reference.\r\n     * @param {VisTimelineService} visTimelineService The VisTimelineService.\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    function VisTimelineDirective(elementRef, visTimelineService) {\r\n        this.elementRef = elementRef;\r\n        this.visTimelineService = visTimelineService;\r\n        /**\r\n         * This event will be raised when the timline is initialized.\r\n         * At this point of time the timeline is successfully registered\r\n         * with the VisNetworkService and you can register to events.\r\n         * The event data is the name of the timeline as a string.\r\n         *\r\n         * @type {EventEmitter<any>}\r\n         * @memberOf VisTimelineDirective\r\n         */\r\n        this.initialized = new core_1.EventEmitter();\r\n        this.isInitialized = false;\r\n        this.visTimelineContainer = elementRef.nativeElement;\r\n    }\r\n    /**\r\n     * Create the timeline when at least visNetwork and visNetworkData\r\n     * are defined.\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    VisTimelineDirective.prototype.ngOnInit = function () {\r\n        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {\r\n            this.createTimeline();\r\n        }\r\n    };\r\n    /**\r\n     * Update the timeline data, groups or options on reference changes to\r\n     * the visTimelineItems, visTimelineGroups or visTimelineOptions properties.\r\n     *\r\n     * @param {{[propName: string]: SimpleChange}} changes\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    VisTimelineDirective.prototype.ngOnChanges = function (changes) {\r\n        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {\r\n            this.createTimeline();\r\n        }\r\n        for (var propertyName in changes) {\r\n            if (changes.hasOwnProperty(propertyName)) {\r\n                var change = changes[propertyName];\r\n                if (!change.isFirstChange()) {\r\n                    if (propertyName === 'visTimelineItems') {\r\n                        this.visTimelineService.setItems(this.visTimeline, changes[propertyName].currentValue);\r\n                    }\r\n                    if (propertyName === 'visTimelineOptions') {\r\n                        this.visTimelineService.setOptions(this.visTimeline, changes[propertyName].currentValue);\r\n                    }\r\n                    if (propertyName === 'visTimelineGroups') {\r\n                        this.visTimelineService.setGroups(this.visTimeline, changes[propertyName].currentValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the destroy function for this timeline instance.\r\n     *\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    VisTimelineDirective.prototype.ngOnDestroy = function () {\r\n        this.isInitialized = false;\r\n        this.visTimelineService.destroy(this.visTimeline);\r\n    };\r\n    VisTimelineDirective.prototype.createTimeline = function () {\r\n        if (this.visTimelineGroups) {\r\n            this.visTimelineService.createWithItemsAndGroups(this.visTimeline, this.visTimelineContainer, this.visTimelineItems, this.visTimelineGroups, this.visTimelineOptions);\r\n        }\r\n        else {\r\n            this.visTimelineService.createWithItems(this.visTimeline, this.visTimelineContainer, this.visTimelineItems, this.visTimelineOptions);\r\n        }\r\n        this.isInitialized = true;\r\n        this.initialized.emit(this.visTimeline);\r\n    };\r\n    var _a, _b, _c, _d, _e, _f;\r\n    tslib_1.__decorate([\r\n        core_1.Input('visTimeline'),\r\n        tslib_1.__metadata(\"design:type\", String)\r\n    ], VisTimelineDirective.prototype, \"visTimeline\", void 0);\r\n    tslib_1.__decorate([\r\n        core_1.Input(),\r\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof index_1.VisTimelineItems !== \"undefined\" && index_1.VisTimelineItems) === \"function\" ? _a : Object)\r\n    ], VisTimelineDirective.prototype, \"visTimelineItems\", void 0);\r\n    tslib_1.__decorate([\r\n        core_1.Input(),\r\n        tslib_1.__metadata(\"design:type\", typeof (_b = typeof index_1.VisTimelineGroups !== \"undefined\" && index_1.VisTimelineGroups) === \"function\" ? _b : Object)\r\n    ], VisTimelineDirective.prototype, \"visTimelineGroups\", void 0);\r\n    tslib_1.__decorate([\r\n        core_1.Input(),\r\n        tslib_1.__metadata(\"design:type\", typeof (_c = typeof index_1.VisTimelineOptions !== \"undefined\" && index_1.VisTimelineOptions) === \"function\" ? _c : Object)\r\n    ], VisTimelineDirective.prototype, \"visTimelineOptions\", void 0);\r\n    tslib_1.__decorate([\r\n        core_1.Output(),\r\n        tslib_1.__metadata(\"design:type\", typeof (_d = typeof core_1.EventEmitter !== \"undefined\" && core_1.EventEmitter) === \"function\" ? _d : Object)\r\n    ], VisTimelineDirective.prototype, \"initialized\", void 0);\r\n    VisTimelineDirective = tslib_1.__decorate([\r\n        core_1.Directive({\r\n            selector: '[visTimeline]'\r\n        }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_e = typeof core_1.ElementRef !== \"undefined\" && core_1.ElementRef) === \"function\" ? _e : Object, typeof (_f = typeof vis_timeline_service_1.VisTimelineService !== \"undefined\" && vis_timeline_service_1.VisTimelineService) === \"function\" ? _f : Object])\r\n    ], VisTimelineDirective);\r\n    return VisTimelineDirective;\r\n}());\r\nexports.VisTimelineDirective = VisTimelineDirective;\r\n",{"version":3,"file":"C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\src\\main\\webapp\\app\\entities\\vue-collaborators\\components\\timeline\\vis-timeline.directive.ts","sourceRoot":"","sources":["C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\node_modules\\tslint-loader\\index.js!C:\\Users\\AJE18508\\Documents\\open_chargeplan2\\src\\main\\webapp\\app\\entities\\vue-collaborators\\components\\timeline\\vis-timeline.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';\r\n\r\nimport { VisTimelineService } from './vis-timeline.service';\r\n\r\nimport { VisTimelineGroups, VisTimelineItems, VisTimelineOptions } from './index';\r\n\r\n/**\r\n * Use this directive with a div container to show timeline data.\r\n *\r\n * @export\r\n * @class VisTimelineDirective\r\n * @implements {OnInit}\r\n * @implements {OnDestroy}\r\n * @implements {OnChanges}\r\n */\r\n@Directive({\r\n    selector: '[visTimeline]'\r\n})\r\nexport class VisTimelineDirective implements OnInit, OnDestroy, OnChanges {\r\n    /**\r\n     * The name or identifier of the timeline (must be unique in your application).\r\n     * This property is used once on init and must not be changed.\r\n     *\r\n     * @type {string}\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    @Input('visTimeline')\r\n    public visTimeline: string;\r\n\r\n    /**\r\n     * The data that will be used to create the timeline.\r\n     * Changes will be detected. If the reference changes then\r\n     * setData will be called on this timeline instance.\r\n     *\r\n     * @type {VisTimelineItems}\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    @Input()\r\n    public visTimelineItems: VisTimelineItems;\r\n\r\n    /**\r\n     * The groups that will be used to create the timeline.\r\n     * Changes will be detected. If the reference changes then\r\n     * setGroups will be called on this timeline instance.\r\n     *\r\n     * @type {VisTimelineGroups}\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    @Input()\r\n    public visTimelineGroups: VisTimelineGroups;\r\n\r\n    /**\r\n     * The options that will be used with this timeline.\r\n     * Changes will be detected. If the reference changes then\r\n     * setOptions will be called on this timeline instance.\r\n     *\r\n     * @type {VisTimelineOptions}\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    @Input()\r\n    public visTimelineOptions: VisTimelineOptions;\r\n\r\n    /**\r\n     * This event will be raised when the timline is initialized.\r\n     * At this point of time the timeline is successfully registered\r\n     * with the VisNetworkService and you can register to events.\r\n     * The event data is the name of the timeline as a string.\r\n     *\r\n     * @type {EventEmitter<any>}\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    @Output()\r\n    public initialized: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    private visTimelineContainer: any;\r\n    private isInitialized: boolean = false;\r\n\r\n    /**\r\n     * Creates an instance of VisTimelineDirective.\r\n     *\r\n     * @param {ElementRef} elementRef The HTML element reference.\r\n     * @param {VisTimelineService} visTimelineService The VisTimelineService.\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    public constructor(private elementRef: ElementRef, private visTimelineService: VisTimelineService) {\r\n        this.visTimelineContainer = elementRef.nativeElement;\r\n    }\r\n\r\n    /**\r\n     * Create the timeline when at least visNetwork and visNetworkData\r\n     * are defined.\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    public ngOnInit(): void {\r\n        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {\r\n            this.createTimeline();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the timeline data, groups or options on reference changes to\r\n     * the visTimelineItems, visTimelineGroups or visTimelineOptions properties.\r\n     *\r\n     * @param {{[propName: string]: SimpleChange}} changes\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\r\n        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {\r\n            this.createTimeline();\r\n        }\r\n\r\n        for (const propertyName in changes) {\r\n            if (changes.hasOwnProperty(propertyName)) {\r\n                const change = changes[propertyName];\r\n                if (!change.isFirstChange()) {\r\n                    if (propertyName === 'visTimelineItems') {\r\n                        this.visTimelineService.setItems(this.visTimeline, changes[propertyName].currentValue);\r\n                    }\r\n                    if (propertyName === 'visTimelineOptions') {\r\n                        this.visTimelineService.setOptions(this.visTimeline, changes[propertyName].currentValue);\r\n                    }\r\n                    if (propertyName === 'visTimelineGroups') {\r\n                        this.visTimelineService.setGroups(this.visTimeline, changes[propertyName].currentValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls the destroy function for this timeline instance.\r\n     *\r\n     *\r\n     * @memberOf VisTimelineDirective\r\n     */\r\n    public ngOnDestroy(): void {\r\n        this.isInitialized = false;\r\n        this.visTimelineService.destroy(this.visTimeline);\r\n    }\r\n\r\n    public createTimeline(): void {\r\n        if (this.visTimelineGroups) {\r\n            this.visTimelineService.createWithItemsAndGroups(\r\n                this.visTimeline,\r\n                this.visTimelineContainer,\r\n                this.visTimelineItems,\r\n                this.visTimelineGroups,\r\n                this.visTimelineOptions\r\n            );\r\n        } else {\r\n            this.visTimelineService.createWithItems(\r\n                this.visTimeline,\r\n                this.visTimelineContainer,\r\n                this.visTimelineItems,\r\n                this.visTimelineOptions\r\n            );\r\n        }\r\n        this.isInitialized = true;\r\n        this.initialized.emit(this.visTimeline);\r\n    }\r\n}\r\n"]}]}